/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI_VolunatryTeam;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Register.RegistrationRequest;
import Business.Role.CompanyManager;
import Business.Role.HospitalAdmin;
import Business.Role.PersonalAdmin;
import Business.Role.NGOAdmin;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nikhil
 */
public class Voluntary_RequestPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Network network;
    private OrganizationDirectory organizationDirectory;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public Voluntary_RequestPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.network = network;
        this.business = business;
        this.organizationDirectory = enterprise.getOrganizationDirectory();
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest workRequest : enterprise.getWorkQueue().getWorkRequestList()) {

            if (workRequest instanceof RegistrationRequest) {
                Object[] row = new Object[7];
                row[0] = workRequest;
                row[1] = ((RegistrationRequest) workRequest).getUserName();
                row[2] = ((RegistrationRequest) workRequest).getNetwork();
                row[3] = ((RegistrationRequest) workRequest).getEmailId();
                row[4] = ((RegistrationRequest) workRequest).getCity();
                row[5] = ((RegistrationRequest) workRequest).getOrgType();
                row[6] = ((RegistrationRequest) workRequest).getName();
                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Status", "UserName", "Network", "Email ID", "City", "Organization Type", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 709, 96));

        assignJButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(102, 0, 102));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 210, -1, -1));

        processJButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        processJButton.setForeground(new java.awt.Color(102, 0, 102));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 210, -1, -1));

        refreshJButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(102, 0, 102));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 210, -1, -1));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("Volunteer Registration Approval - Work Request Panel ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons/8D-Disaster_Management.png"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 600, 290));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            if (request.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request already processed.");
                return;
            } else {
                request.setReceiver(userAccount);
                request.setStatus("Pending");
                populateTable();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a reuest to process.");
            return;
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow >= 0) {
            RegistrationRequest request = (RegistrationRequest) workRequestJTable.getValueAt(selectedRow, 0);
            Employee emp = new Employee();
            emp.setName(request.getName());
            if (request.getOrgType() == Organization.Type.NGO) {
                System.out.println("UserInterfacengo");
                organizationDirectory.createOrganization(request.getOrgType(), request.getName(), request.getPosition());
                UserAccount ua1 = enterprise.getUserAccountDirectory().createUserAccount(request.getUserName(), request.getPassword(), emp, new NGOAdmin());

            } else if (request.getOrgType() == Organization.Type.Personal) {
                System.out.println("UserInterface");
                organizationDirectory.createOrganization(request.getOrgType(), request.getName(), request.getPosition());
                UserAccount ua2 = enterprise.getUserAccountDirectory().createUserAccount(request.getUserName(), request.getPassword(), emp, new PersonalAdmin());

            } else if (request.getOrgType() == Organization.Type.Hospital) {
                System.out.println("UserInterface");
                organizationDirectory.createOrganization(request.getOrgType(), request.getName(), request.getPosition());
                UserAccount ua3 = enterprise.getUserAccountDirectory().createUserAccount(request.getUserName(), request.getPassword(), emp, new HospitalAdmin());

            } else if (request.getOrgType() == Organization.Type.Company) {
                System.out.println("UserInterface");
                organizationDirectory.createOrganization(request.getOrgType(), request.getName(), request.getPosition());
                UserAccount ua4 = enterprise.getUserAccountDirectory().createUserAccount(request.getUserName(), request.getPassword(), emp, new CompanyManager());

            }

            request.setStatus("Completed");
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
            return;
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
