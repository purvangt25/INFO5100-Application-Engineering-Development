/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI_Scene_Management;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DisasterOrganization;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.Scene.Scene;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Emergency;
import Business.WorkQueue.Resource;
import Business.WorkQueue.WorkRequest;
import UI_GoogleMap.Nearest_Distance_Panel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shash
 */
public class Scene_ManagePanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount account;
    Enterprise enterprise;
    Network network;
    EcoSystem business;
    Scene scene1;
    Organization organization;

    /**
     * Creates new form Scene_ManagePanel
     */
    public Scene_ManagePanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        this.enterprise = enterprise;
        this.network = network;
        this.scene1 = scene1;
        this.organization = organization;

        populateWorkQueueTableResource();
        populateWorkQueueTableEmergency();
        populateSiteName();
    }

    public void populateSiteName() {
        DefaultTableModel model = (DefaultTableModel) assignedSiteJTable.getModel();
        model.setRowCount(0);
        Scene site = null;
        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            System.out.println("asd1");
            for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                System.out.println("asd2");
                if (o instanceof DisasterOrganization) {
                    System.out.println("asd3");
                    for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                        System.out.println("asd4");
                        if (u.getRole().toString().equals(Role.RoleType.SceneManager.getValue())) {
                            System.out.println("asd" + u.getEmployee().getName());
                            site = u.getEmployee().getScene();
                            Object[] row = new Object[4];
                            row[0] = site;
                            model.addRow(row);
                        }
                    }
                }
            }
        }
    }

    public void populateWorkQueueTableResource() {
        DefaultTableModel model = (DefaultTableModel) SiteManageTable.getModel();
        model.setRowCount(0);

        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {
            if (work instanceof Resource) {
                Object[] row = new Object[4];
                row[0] = work;
                row[1] = work.getSender();
                row[2] = ((Resource) work).getReqType();
                row[3] = ((Resource) work).getQty();
                model.addRow(row);
            }
        }
    }

    public void populateWorkQueueTableEmergency() {
        DefaultTableModel model = (DefaultTableModel) SiteManageTable1.getModel();
        model.setRowCount(0);

        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {
            if (work instanceof Emergency) {
                Object[] row = new Object[5];
                row[0] = work;
                row[1] = work.getSender();
                row[2] = ((Emergency) work).getRequestOrg();
                row[3] = ((Emergency) work).getRequestType();
                row[4] = ((Emergency) work).getQty();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SiteManageTable = new javax.swing.JTable();
        btnDelResReq = new javax.swing.JButton();
        requestEmergenciesbtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        requestResourcesbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SiteManageTable1 = new javax.swing.JTable();
        btnDelEmer = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        assignedSiteJTable = new javax.swing.JTable();
        nearestDistBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SiteManageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request Status", "Requested Manager", "Requested Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SiteManageTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 770, 116));

        btnDelResReq.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        btnDelResReq.setForeground(new java.awt.Color(102, 0, 102));
        btnDelResReq.setText("DELETE RESOURCE REQUEST");
        btnDelResReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelResReqActionPerformed(evt);
            }
        });
        add(btnDelResReq, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 360, 190, -1));

        requestEmergenciesbtn.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        requestEmergenciesbtn.setForeground(new java.awt.Color(102, 0, 102));
        requestEmergenciesbtn.setText("REQUEST EMERGENCIES");
        requestEmergenciesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestEmergenciesbtnActionPerformed(evt);
            }
        });
        add(requestEmergenciesbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, 160, -1));

        jButton3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(102, 0, 102));
        jButton3.setText("<<BACK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 540, -1, -1));

        requestResourcesbtn.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        requestResourcesbtn.setForeground(new java.awt.Color(102, 0, 102));
        requestResourcesbtn.setText("REQUEST RESOURCES");
        requestResourcesbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestResourcesbtnActionPerformed(evt);
            }
        });
        add(requestResourcesbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 360, 150, -1));

        SiteManageTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request Status", "Requested Manager", "Requested Organization", "Requested Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SiteManageTable1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 770, 116));

        btnDelEmer.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        btnDelEmer.setForeground(new java.awt.Color(102, 0, 102));
        btnDelEmer.setText("DELETE EMERGENCY REQUEST");
        btnDelEmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelEmerActionPerformed(evt);
            }
        });
        add(btnDelEmer, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 540, 190, -1));

        assignedSiteJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Scene Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(assignedSiteJTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 240, 130));

        nearestDistBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        nearestDistBtn.setForeground(new java.awt.Color(102, 0, 102));
        nearestDistBtn.setText("View Nearest Organizations");
        nearestDistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nearestDistBtnActionPerformed(evt);
            }
        });
        add(nearestDistBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 190, -1));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 102));
        jLabel1.setText("SCENE REQUEST AND RESPONSE PANEL");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 380, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/icons/64563c7ea34d757.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 520, 130));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void requestEmergenciesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestEmergenciesbtnActionPerformed
        Scene_ManagerPanel_workArea ramop = new Scene_ManagerPanel_workArea(userProcessContainer, account, enterprise, network, business);
        userProcessContainer.add("Scene_ManagerPanel", ramop);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);        // TODO add your handling code here:
    }//GEN-LAST:event_requestEmergenciesbtnActionPerformed

    private void btnDelResReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelResReqActionPerformed
        // TODO add your handling code here:
        int selectedRow = SiteManageTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to delete the account", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Resource p = (Resource) SiteManageTable.getValueAt(selectedRow, 0);

            account.getWorkQueue().getWorkRequestList().remove(p);

            //  business.getWorkQueue().getWorkRequestList().remove(p);
            JOptionPane.showMessageDialog(null, "You have successfully deleted the value");
            populateWorkQueueTableResource();
        }
    }//GEN-LAST:event_btnDelResReqActionPerformed

    private void requestResourcesbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestResourcesbtnActionPerformed
        // TODO add your handling code here:
        Scene_Manager_ResourcePanel ramop = new Scene_Manager_ResourcePanel(userProcessContainer, account, enterprise, network, business);
        userProcessContainer.add("Scene_Manager_ResourcePanel", ramop);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_requestResourcesbtnActionPerformed

    private void btnDelEmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelEmerActionPerformed
        // TODO add your handling code here:
        int selectedRow = SiteManageTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to delete the value", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Emergency p = (Emergency) SiteManageTable1.getValueAt(selectedRow, 0);

            account.getWorkQueue().getWorkRequestList().remove(p);

            //  business.getWorkQueue().getWorkRequestList().remove(p);
            JOptionPane.showMessageDialog(null, "You have successfully deleted the value");
            populateWorkQueueTableEmergency();
        }
    }//GEN-LAST:event_btnDelEmerActionPerformed

    private void nearestDistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nearestDistBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = assignedSiteJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to view nearest organizations", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Scene s = (Scene) assignedSiteJTable.getValueAt(selectedRow, 0);
            Nearest_Distance_Panel ramop = new Nearest_Distance_Panel(userProcessContainer, account, organization, s, enterprise, network, business);
            userProcessContainer.add("Nearest_Distance_Panel", ramop);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_nearestDistBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SiteManageTable;
    private javax.swing.JTable SiteManageTable1;
    private javax.swing.JTable assignedSiteJTable;
    private javax.swing.JButton btnDelEmer;
    private javax.swing.JButton btnDelResReq;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton nearestDistBtn;
    private javax.swing.JButton requestEmergenciesbtn;
    private javax.swing.JButton requestResourcesbtn;
    // End of variables declaration//GEN-END:variables
}
